import fontkit from '@pdf-lib/fontkit';
import { mkdir, readFile, writeFile } from 'fs/promises';
import { NextResponse } from 'next/server';
import path from 'path';
import { PDFDocument, rgb } from 'pdf-lib';
import { v4 as uuidv4 } from 'uuid';

export async function POST(req: Request) {
  try {
    const formData = await req.json();
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:', formData);

    const pdfDoc = await PDFDocument.create();
    pdfDoc.registerFontkit(fontkit);

    const fontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Regular.ttf');
    const emojiFontPath = path.resolve(process.cwd(), 'public/fonts/Symbola.ttf');

    const fontBytes = await readFile(fontPath);
    const emojiFontBytes = await readFile(emojiFontPath);

    const customFont = await pdfDoc.embedFont(fontBytes);
    const emojiCustomFont = await pdfDoc.embedFont(emojiFontBytes);

    const blue = rgb(0.2, 0.4, 0.8);
    const black = rgb(0.1, 0.1, 0.1);

    let page = pdfDoc.addPage([595, 842]);
    page.drawText('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–ª–∞–Ω', {
      x: 50,
      y: 750,
      size: 24,
      font: customFont,
      color: blue,
    });
    page.drawText('üí° –ü–ª–∞–Ω—É–π, —â–æ–± –±—É—Ç–∏ –≤—ñ–ª—å–Ω–∏–º', {
      x: 50,
      y: 720,
      size: 16,
      font: emojiCustomFont,
      color: black,
    });
    page.drawText(`–Ü–º‚Äô—è: ${formData.name ?? ''}`, {
      x: 50,
      y: 690,
      size: 14,
      font: customFont,
      color: black,
    });
    page.drawText(`Email: ${formData.email ?? ''}`, {
      x: 50,
      y: 670,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText(`–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone ?? ''}`, {
      x: 50,
      y: 650,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText(`Instagram –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç: ${formData.contact ?? ''}`, {
      x: 50,
      y: 630,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText(`–î–∞—Ç–∞: ${new Date().toLocaleDateString()}`, {
      x: 50,
      y: 610,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText('–§—ñ–Ω–ø–ª–∞–Ω –≤—ñ–¥ @vash_ivan', {
      x: 480,
      y: 30,
      size: 10,
      font: customFont,
      color: rgb(0.4, 0.4, 0.4),
    });

    page = pdfDoc.addPage([595, 842]);
    let y = 790;
    const drawHeading = (text: string) => {
      page.drawText(text, { x: 50, y, size: 16, font: customFont, color: blue });
      y -= 35;
    };
    const drawText = (label: string, value: string | number, font = customFont) => {
      page.drawText(`${label} ${value}`, { x: 50, y, size: 12, font, color: black });
      y -= 80;
    };

    drawHeading('1. –î–æ—Ö–æ–¥–∏ —Ç–∞ –í–∏—Ç—Ä–∞—Ç–∏');
    drawText('–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —â–æ–º—ñ—Å—è—Ü—è:', `${formData.income} ${formData.currency}`);
    drawText('–ü–æ—Å—Ç—ñ–π–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:', `${formData.expenses} ${formData.currency}`);
    drawText('–ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏—Ç—Ä–∞—Ç:', `${formData.income - formData.expenses} ${formData.currency}`);

    drawHeading('2. –ë–æ—Ä–≥–∏');
    if (formData.hasDebt) {
      drawText('–ë–æ—Ä–≥ —â–æ–º—ñ—Å—è—Ü—è:', `${formData.debt ?? 0} ${formData.currency}`);
    } else {
      drawText('–ù–µ–º–∞—î –±–æ—Ä–≥—ñ–≤', '');
    }

    drawHeading('3. –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–æ–Ω–¥');
    drawText('–¶—ñ–ª—å –ø–æ–¥—É—à–∫–∏ (–º—ñ—Å.):', formData.bufferMonths);
    if (formData.hasBuffer) drawText('–í–∂–µ —î –≤ –ø–æ–¥—É—à—Ü—ñ:', `${formData.bufferAmount} ${formData.currency}`);

    page = pdfDoc.addPage([595, 842]);
    y = 790;
    drawHeading('4. –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó');
    drawText('–©–æ–º—ñ—Å—è—á–Ω–µ –≤—ñ–¥–∫–ª–∞–¥–∞–Ω–Ω—è:', `${formData.monthlyInvestment} ${formData.currency}`);
    drawText('–¢–∏–ø –≤–Ω–µ—Å–∫—ñ–≤:', formData.investmentType === 'regular' ? '–†–µ–≥—É–ª—è—Ä–Ω–æ' : '–ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤');

    drawHeading('5. –ú–µ—Ç–∞ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è');
    drawText('–ë–∞–∂–∞–Ω–∞ —Å—É–º–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥:', `${formData.goalYear} ${formData.currency}`);
    if (formData.goalReason) drawText('–ü—Ä–∏—á–∏–Ω–∞:', formData.goalReason);

    drawHeading('6. –ü—Ä–æ–≥–Ω–æ–∑');
    const periodMonths = Number(formData.periodMonths ?? 12);
    const available = formData.income - formData.expenses;
    const half = Math.max(available / 2, 0);
    drawText('–î–æ—Å—Ç—É–ø–Ω–æ —â–æ–º—ñ—Å—è—Ü—è:', `${available} ${formData.currency}`);
    drawText('50% –Ω–∞ –ø–æ–¥—É—à–∫—É:', `${half} ${formData.currency}`);
    drawText('50% –Ω–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó:', `${half} ${formData.currency}`);
    drawText('–ü–µ—Ä—ñ–æ–¥ (–º—ñ—Å.):', periodMonths);

    const bufferTotal = Math.round(half * periodMonths);
    const investTotal = Math.round(half * periodMonths);
    drawText('‚¨áÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–æ –Ω–∞ –ø–æ–¥—É—à—Ü—ñ:', `${bufferTotal} ${formData.currency}`, emojiCustomFont);
    drawText('‚¨áÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–æ –≤ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è—Ö:', `${investTotal} ${formData.currency}`, emojiCustomFont);

    page = pdfDoc.addPage([595, 842]);
    y = 790;
    drawHeading('7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó');
    const tips = [
      'üîπ –û–±–ª—ñ–∫ –≤–∏—Ç—Ä–∞—Ç = –∫–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä–æ—à–µ–π.',
      'üîπ –†–µ–∑–µ—Ä–≤ –Ω–∞ 3‚Äì6 –º—ñ—Å. ‚Äî –ø–µ—Ä–µ–¥ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏.',
      'üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫–ª–∞–¥–∞–Ω–Ω—è = —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å.',
      'üîπ –ü–æ—á–Ω–∏ –∑ ETF: VWRA, CSPX, SCHD, VOO —Ç–æ—â–æ.',
      'üîπ –Ü–Ω–≤–µ—Å—Ç—É–π —É —Å–µ–±–µ: –∑–Ω–∞–Ω–Ω—è, –∑–≤‚Äô—è–∑–∫–∏, –¥–æ—Å–≤—ñ–¥.',
    ];
    tips.forEach(t => { page.drawText(t, { x: 50, y, size: 12, font: emojiCustomFont, color: black }); y -= 18; });

    page.drawText('@vash_ivan', {
      x: 480,
      y: 30,
      size: 10,
      font: customFont,
      color: rgb(0.4, 0.4, 0.4),
    });

    // --- –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø PDF –£ –ü–£–ë–õ–Ü–ß–ù–£ –ü–ê–ü–ö–£ ---
    const pdfBytes = await pdfDoc.save();
    const fileId = uuidv4();
    const fileName = `finplan-${fileId}.pdf`;
    const outputPath = path.resolve(process.cwd(), 'public/tmp', fileName);
    await mkdir(path.resolve(process.cwd(), 'public/tmp'), { recursive: true });
    await writeFile(outputPath, pdfBytes);

    const fileUrl = `/tmp/${fileName}`;
    return NextResponse.json({ url: fileUrl });
  } catch (err) {
    console.error('‚ùå PDF generation failed:', err);
    return NextResponse.json({ error: 'Error generating PDF' }, { status: 500 });
  }
}
