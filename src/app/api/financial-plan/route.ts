// app/api/financial-plan/route.ts

import fontkit from '@pdf-lib/fontkit';
import { mkdir, readFile, writeFile } from 'fs/promises';
import { NextResponse } from 'next/server';
import path from 'path';
import { PDFDocument, rgb } from 'pdf-lib';
import { v4 as uuidv4 } from 'uuid';

export async function POST(req: Request) {
  try {
    const formData = await req.json();
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ:', formData);

    const pdfDoc = await PDFDocument.create();
    pdfDoc.registerFontkit(fontkit);

    const fontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Regular.ttf');
    const emojiFontPath = path.resolve(process.cwd(), 'public/fonts/Symbola.ttf');

    const fontBytes = await readFile(fontPath);
    const emojiFontBytes = await readFile(emojiFontPath);

    const customFont = await pdfDoc.embedFont(fontBytes);
    const emojiCustomFont = await pdfDoc.embedFont(emojiFontBytes);

    const blue = rgb(0.2, 0.4, 0.8);
    const black = rgb(0.1, 0.1, 0.1);

    // –û–±–∫–ª–∞–¥–∏–Ω–∫–∞
    let page = pdfDoc.addPage([595, 842]);
    page.drawRectangle({
      x: 40,
      y: 40,
      width: 515,
      height: 760,
      borderWidth: 1,
      borderColor: rgb(0.8, 0.85, 0.95),
      color: rgb(1, 1, 1),
    });
    page.drawText('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–ª–∞–Ω', {
      x: 50,
      y: 720,
      size: 28,
      font: customFont,
      color: blue,
    });
    page.drawText('–ü–ª–∞–Ω—É–π, —â–æ–± –±—É—Ç–∏ –≤—ñ–ª—å–Ω–∏–º', {
      x: 50,
      y: 690,
      size: 18,
      font: emojiCustomFont,
      color: black,
    });
    page.drawText(`–Ü–º‚Äô—è: ${formData.name ?? ''}`.trim(), {
      x: 50,
      y: 650,
      size: 14,
      font: customFont,
      color: black,
    });
    page.drawText(`Email: ${formData.email ?? ''}`, {
      x: 50,
      y: 630,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText(`–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone ?? ''}`, {
      x: 50,
      y: 610,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText(`Instagram –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç: ${formData.contact ?? ''}`, {
      x: 50,
      y: 590,
      size: 12,
      font: customFont,
      color: black,
    });
    page.drawText(`–î–∞—Ç–∞: ${new Date().toLocaleDateString()}`, {
      x: 50,
      y: 570,
      size: 12,
      font: customFont,
      color: black,
    });

    page.drawText('–§—ñ–Ω–ø–ª–∞–Ω –≤—ñ–¥ @vash_ivan', {
      x: 420,
      y: 30,
      size: 10,
      font: customFont,
      color: rgb(0.4, 0.4, 0.4),
    });

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const newPage = () => {
      page = pdfDoc.addPage([595, 842]);
      return 790;
    };

    let y = newPage();

    const drawHeading = (text: string) => {
  if (y < 100) y = newPage();
  y -= 20;
  page.drawText(text, { x: 50, y, size: 16, font: customFont, color: blue });
  y -= 10;
  page.drawLine({
    start: { x: 50, y },
    end: { x: 545, y },
    thickness: 0.5,
    color: rgb(0.7, 0.7, 0.9),
  });
  y -= 40;
};

    const drawText = (label: string, value: string | number, font = customFont) => {
      if (y < 80) y = newPage();
      page.drawText(`${label} ${value}`, { x: 50, y, size: 12, font, color: black });
      y -= 30;
    };

    drawHeading('1. –î–æ—Ö–æ–¥–∏ —Ç–∞ –í–∏—Ç—Ä–∞—Ç–∏');
    drawText('–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —â–æ–º—ñ—Å—è—Ü—è:', `${formData.income} ${formData.currency}`);
    drawText('–ü–æ—Å—Ç—ñ–π–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:', `${formData.expenses} ${formData.currency}`);
    drawText('–ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–∏—Ç—Ä–∞—Ç:', `${formData.income - formData.expenses} ${formData.currency}`);

    drawHeading('üí≥ 2. –ë–æ—Ä–≥–∏');
    if (formData.hasDebt) {
      drawText('–ë–æ—Ä–≥ —â–æ–º—ñ—Å—è—Ü—è:', `${formData.debt ?? 0} ${formData.currency}`);
    } else {
      drawText('–ù–µ–º–∞—î –±–æ—Ä–≥—ñ–≤', '');
    }

    drawHeading('3. –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–æ–Ω–¥');
    drawText('–¶—ñ–ª—å –ø–æ–¥—É—à–∫–∏ (–º—ñ—Å.):', formData.bufferMonths);
    if (formData.hasBuffer)
      drawText('–í–∂–µ —î –≤ –ø–æ–¥—É—à—Ü—ñ:', `${formData.bufferAmount} ${formData.currency}`);

    drawHeading('4. –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó');
    drawText('–©–æ–º—ñ—Å—è—á–Ω–µ –≤—ñ–¥–∫–ª–∞–¥–∞–Ω–Ω—è:', `${formData.monthlyInvestment} ${formData.currency}`);
    drawText('–¢–∏–ø –≤–Ω–µ—Å–∫—ñ–≤:', formData.investmentType === 'regular' ? '–†–µ–≥—É–ª—è—Ä–Ω–æ' : '–ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤');

    drawHeading('5. –ú–µ—Ç–∞ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è');
    drawText('–ë–∞–∂–∞–Ω–∞ —Å—É–º–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥:', `${formData.goalYear} ${formData.currency}`);
    drawText('–ü—Ä–∏—á–∏–Ω–∞:', formData.goalReason || '‚Äî');

    drawHeading('6. –ü—Ä–æ–≥–Ω–æ–∑');
    const periodMonths = Number(formData.periodMonths ?? 12);
    const available = formData.income - formData.expenses;
    const half = Math.max(available / 2, 0);
    drawText('–î–æ—Å—Ç—É–ø–Ω–æ —â–æ–º—ñ—Å—è—Ü—è:', `${available} ${formData.currency}`);
    drawText('50% –Ω–∞ –ø–æ–¥—É—à–∫—É:', `${half} ${formData.currency}`);
    drawText('50% –Ω–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó:', `${half} ${formData.currency}`);
    drawText('–ü–µ—Ä—ñ–æ–¥ (–º—ñ—Å.):', periodMonths);
    drawText('‚¨áÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–æ –Ω–∞ –ø–æ–¥—É—à—Ü—ñ:', `${Math.round(half * periodMonths)} ${formData.currency}`, emojiCustomFont);
    drawText('‚¨áÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–æ –≤ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è—Ö:', `${Math.round(half * periodMonths)} ${formData.currency}`, emojiCustomFont);

    drawHeading('7. –î–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç');
    drawText('–ñ–∏—Ç–ª–æ:', `${formData.housing} ${formData.currency}`);
    drawText('–á–∂–∞:', `${formData.food} ${formData.currency}`);
    drawText('–ö–∞—Ñ–µ:', `${formData.cafes} ${formData.currency}`);
    drawText('–†–æ–∑–≤–∞–≥–∏:', `${formData.entertainment} ${formData.currency}`);
    drawText('–Ü–Ω—à–µ:', `${formData.otherExpenses} ${formData.currency}`);

    drawHeading('8. –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏');
    drawText('–û–ø–∏—Å:', formData.plannedExpensesDesc);
    drawText('–°—É–º–∞:', `${formData.plannedExpensesAmount} ${formData.currency}`);

    drawHeading('9. –î–∂–µ—Ä–µ–ª–∞ –¥–æ—Ö–æ–¥—É');
    drawText('–ê–∫—Ç–∏–≤–Ω—ñ –¥–æ—Ö–æ–¥–∏:', formData.incomeSources);
    drawText('–ü–∞—Å–∏–≤–Ω—ñ –¥–æ—Ö–æ–¥–∏:', formData.passiveIncome);

    drawHeading('10. –ü–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å');
    drawText('–ö—Ä–∞—ó–Ω–∞:', formData.country);
    drawText('–°—Ç–∞—Ç—É—Å:', formData.taxStatus);

    drawHeading('11. –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞');
    drawText('–û–±–ª—ñ–∫ –≤–∏—Ç—Ä–∞—Ç:', formData.tracksExpenses);
    drawText('–ï–º–æ—Ü—ñ–π–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:', formData.emotionalSpending);
    drawText('–î–æ—Å–≤—ñ–¥ –±—é–¥–∂–µ—Ç—É:', formData.budgetingExperience);

    drawHeading('12. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ç–∞ —Å—Ç–∏–ª—å');
    drawText('–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏:', formData.lifePriorities);
    drawText('–Ü–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', formData.investmentStyle);

    drawHeading('13. –ü–æ—Ç–æ—á–Ω—ñ –∞–∫—Ç–∏–≤–∏');
    drawText('–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è:', `${formData.currentSavings} ${formData.currency}`);
    drawText('–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó:', `${formData.currentInvestments} ${formData.currency}`);

    drawHeading('14. –î–æ—Å–≤—ñ–¥ —Ç–∞ —Ä–∏–∑–∏–∫');
    drawText('–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å –¥–æ —Ä–∏–∑–∏–∫—É:', formData.riskTolerance);
    drawText('–î–æ—Å–≤—ñ–¥ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', formData.investmentExperience);

    drawHeading('15. –ú–∞–π–±—É—Ç–Ω—ñ –ø–æ–¥—ñ—ó');
    drawText('–û—á—ñ–∫—É–≤–∞–Ω—ñ –∑–º—ñ–Ω–∏:', formData.futureEvents);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    page = pdfDoc.addPage([595, 842]);
    y = 790;
    drawHeading('16. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó');
    const tips = [
      'üîπ –û–±–ª—ñ–∫ –≤–∏—Ç—Ä–∞—Ç = –∫–æ–Ω—Ç—Ä–æ–ª—å –≥—Ä–æ—à–µ–π.',
      'üîπ –†–µ–∑–µ—Ä–≤ –Ω–∞ 3‚Äì6 –º—ñ—Å. ‚Äî –ø–µ—Ä–µ–¥ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏.',
      'üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫–ª–∞–¥–∞–Ω–Ω—è = —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å.',
      'üîπ –ü–æ—á–Ω–∏ –∑ ETF: VWRA, CSPX, SCHD, VOO —Ç–æ—â–æ.',
      'üîπ –Ü–Ω–≤–µ—Å—Ç—É–π —É —Å–µ–±–µ: –∑–Ω–∞–Ω–Ω—è, –∑–≤‚Äô—è–∑–∫–∏, –¥–æ—Å–≤—ñ–¥.',
    ];
    tips.forEach(t => { page.drawText(t, { x: 50, y, size: 12, font: emojiCustomFont, color: black }); y -= 28; });

    page.drawText('@vash_ivan', {
      x: 480,
      y: 30,
      size: 10,
      font: customFont,
      color: rgb(0.4, 0.4, 0.4),
    });

    // –û—Å–æ–±–∏—Å—Ç—ñ –Ω–æ—Ç–∞—Ç–∫–∏
    page = pdfDoc.addPage([595, 842]);
    y = 790;
    page.drawText('–û—Å–æ–±–∏—Å—Ç—ñ –Ω–æ—Ç–∞—Ç–∫–∏', {
      x: 50,
      y,
      size: 18,
      font: customFont,
      color: blue,
    });
    y -= 40;
    y -= 40;
    page.drawText('–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ç–≤–æ—ó—Ö –≤–ª–∞—Å–Ω–∏—Ö —Ä–æ–∑–¥—É–º—ñ–≤, —ñ–¥–µ–π —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ä—ñ—à–µ–Ω—å.', {
      x: 50,
      y,
      size: 12,
      font: customFont,
      color: black,
    });
    y -= 50;
    page.drawText('(–¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞–Ω–æ—Ç—É–≤–∞—Ç–∏ —Å–≤–æ—ó –¥—É–º–∫–∏ –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ—ñ–Ω–ø–ª–∞–Ω—É...)', {
      x: 50,
      y,
      size: 11,
      font: customFont,
      color: black,
    });
    for (let i = 0; i < 15; i++) {
      y -= 35;
      page.drawLine({
        start: { x: 50, y },
        end: { x: 545, y },
        thickness: 0.3,
        color: rgb(0.85, 0.85, 0.85),
      });
    }

    const pdfBytes = await pdfDoc.save();
    const fileId = uuidv4();
    const fileName = `finplan-${fileId}.pdf`;
    const outputPath = path.resolve(process.cwd(), 'public/tmp', fileName);
    await mkdir(path.resolve(process.cwd(), 'public/tmp'), { recursive: true });
    await writeFile(outputPath, pdfBytes);

    const fileUrl = `/tmp/${fileName}`;
    return NextResponse.json({ url: fileUrl });
  } catch (err) {
    console.error('‚ùå PDF generation failed:', err);
    return NextResponse.json({ error: 'Error generating PDF' }, { status: 500 });
  }
}
